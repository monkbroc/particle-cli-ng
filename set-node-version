#!/usr/bin/env node
'use strict';

let bucket = 'particle-cli-ng-alpha';
let assetsHost = 'dfu55fst9l042.cloudfront.net';

let crypto = require('crypto');
let fs     = require('fs');
let https  = require('https');
let knox   = require('knox').createClient({
  key:    process.env.PARTICLE_CLI_RELEASE_ACCESS,
  secret: process.env.PARTICLE_CLI_RELEASE_SECRET,
  bucket: bucket,
  region: 'us-east-1',
});

// CHANGE THESE ONLY AND RUN SCRIPT
// ==========================
const version = '5.4.1';
const npmVersion = '3.3.10';
// ==========================

const outputPath = '/./gode/constants.go';
const urlBase = `https://nodejs.org/download/release/v${version}`;

let npmURL = `https://github.com/npm/npm/archive/v${npmVersion}.zip`;
let npmSha;
let targets = [
  {arch: '386',   os: 'linux',   url: urlBase+`/node-v${version}-linux-x86.tar.gz`,    base: `node-v${version}-linux-x86`},
  {arch: 'amd64', os: 'linux',   url: urlBase+`/node-v${version}-linux-x64.tar.gz`,    base: `node-v${version}-linux-x64`},
  {arch: 'arm',   os: 'linux',   url: urlBase+`/node-v${version}-linux-armv7l.tar.gz`, base: `node-v${version}-linux-armv7l`},
  {arch: 'amd64', os: 'darwin',  url: urlBase+`/node-v${version}-darwin-x64.tar.gz`,   base: `node-v${version}-darwin-x64`},
  {arch: '386',   os: 'windows', url: urlBase+`/win-x86/node.exe`,                     base: `node-v${version}-windows-x86`},
  {arch: 'amd64', os: 'windows', url: urlBase+`/win-x64/node.exe`,                     base: `node-v${version}-windows-x64`},
];

function sha (path) {
  return new Promise(function (fulfill) {
    let fd   = fs.createReadStream(path);
    let hash = crypto.createHash('sha256');
    hash.setEncoding('hex');
    fd.on('end', function () {
      hash.end();
      fulfill(hash.read());
    });
    fd.pipe(hash);
  });
}

function download (url, path) {
  return new Promise(function (fulfill, reject) {
    https.get(url, function (res) {
      if (res.statusCode >= 300 && res.statusCode <= 399) return fulfill(download(res.headers.location, path));
      if (res.statusCode <= 199 || res.statusCode >= 400) return reject(new Error(`${res.statusCode}:${url}`));
      res.pipe(fs.createWriteStream(path));
      res.on('end', fulfill);
    })
  });
}

function s3upload (local, remote) {
  let key = remote.replace('https://' + assetsHost, '');
  return new Promise(function (fulfill, reject) {
    knox.putFile(local, key, {
      'x-amz-acl': 'public-read',
      'x-amz-meta-Cache-Control': 'public,max-age=86400',
      'Cache-Control': 'public,max-age=86400',
    }, function (err, res) {
      if (err) return reject(err);
      res.resume();
      fulfill();
    });
  });
}

function processTarget(target) {
  let path = `./tmp/${target.arch}-${target.os}-v${version}`;
  return download(target.url, path)
  .then(()    => sha(path))
  .then((sha) => target.sha = sha)
  .then(function () {
    target.url = target.url.replace('https://nodejs.org/download/release/', 'https://' + assetsHost + '/node/');
    return s3upload(path, target.url);
  });
}

function processNpm() {
  let path = './tmp/npm.zip';
  return download(npmURL, path)
  .then(()    => sha(path))
  .then((sha) => npmSha = sha)
  .then(function () {
    npmURL = npmURL.replace('https://github.com/npm/npm/archive/', 'https://' + assetsHost + '/npm/');
    return s3upload(path, npmURL);
  });
}

function output () {
  let output = `package gode

//
// DO NOT EDIT
//
// THIS FILE IS GENERATED WITH ./set-node-version
//

// Version is the requested node version
const Version = "${version}"

// NpmVersion is the requested npm version
const NpmVersion = "${npmVersion}"

const npmSha = "${npmSha}"
const npmURL = "${npmURL}"

var targets = []Target{
`;
  for (let target of targets) output += `\t{"${target.arch}", "${target.os}", "${target.url}", "${target.base}", "${target.sha}"},\n`;
  output += '}\n';
  return output;
}

console.log(`Setting node version to ${version} and npm to ${npmVersion}...`);
Promise.all(targets.map(processTarget))
.then(processNpm)
.then(() => fs.writeFileSync(__dirname + outputPath, output()))
.then(function () { console.log(`${outputPath} updated`); })
.catch(function (err) { console.error(err.stack); process.exit(1); });
